"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const core_utils_1 = require("@electron-forge/core-utils");
const tracer_1 = require("@electron-forge/tracer");
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = __importDefault(require("debug"));
const listr2_1 = require("listr2");
const electron_executable_1 = __importDefault(require("../util/electron-executable"));
const forge_config_1 = __importDefault(require("../util/forge-config"));
const hook_1 = require("../util/hook");
const read_package_json_1 = require("../util/read-package-json");
const resolve_dir_1 = __importDefault(require("../util/resolve-dir"));
const d = (0, debug_1.default)('electron-forge:start');
exports.default = (0, tracer_1.autoTrace)({ name: 'start()', category: '@electron-forge/core' }, async (childTrace, { dir: providedDir = process.cwd(), appPath = '.', interactive = false, enableLogging = false, args = [], runAsNode = false, inspect = false, inspectBrk = false, }) => {
    const platform = process.env.npm_config_platform || process.platform;
    const arch = process.env.npm_config_arch || process.arch;
    const listrOptions = {
        concurrent: false,
        rendererOptions: {
            collapseErrors: false,
        },
        silentRendererCondition: !interactive,
        fallbackRendererCondition: Boolean(process.env.DEBUG) || Boolean(process.env.CI),
    };
    const runner = new listr2_1.Listr([
        {
            title: 'Locating application',
            task: childTrace({ name: 'locate-application', category: '@electron-forge/core' }, async (_, ctx) => {
                const resolvedDir = await (0, resolve_dir_1.default)(providedDir);
                if (!resolvedDir) {
                    throw new Error('Failed to locate startable Electron application');
                }
                ctx.dir = resolvedDir;
            }),
        },
        {
            title: 'Loading configuration',
            task: childTrace({ name: 'load-forge-config', category: '@electron-forge/core' }, async (_, ctx) => {
                const { dir } = ctx;
                ctx.forgeConfig = await (0, forge_config_1.default)(dir);
                ctx.packageJSON = await (0, read_package_json_1.readMutatedPackageJson)(dir, ctx.forgeConfig);
                if (!ctx.packageJSON.version) {
                    throw new Error(`Please set your application's 'version' in '${dir}/package.json'.`);
                }
            }),
        },
        {
            title: 'Preparing native dependencies',
            task: childTrace({ name: 'prepare-native-dependencies', category: '@electron-forge/core' }, async (_, { dir, forgeConfig, packageJSON }, task) => {
                await (0, core_utils_1.listrCompatibleRebuildHook)(dir, await (0, core_utils_1.getElectronVersion)(dir, packageJSON), platform, arch, forgeConfig.rebuildConfig, task);
            }),
            rendererOptions: {
                persistentOutput: true,
                bottomBar: Infinity,
                timer: { ...listr2_1.PRESET_TIMER },
            },
        },
        {
            title: `Running ${chalk_1.default.yellow('generateAssets')} hook`,
            task: childTrace({ name: 'run-generateAssets-hook', category: '@electron-forge/core' }, async (childTrace, { forgeConfig }, task) => {
                return (0, tracer_1.delayTraceTillSignal)(childTrace, task.newListr(await (0, hook_1.getHookListrTasks)(childTrace, forgeConfig, 'generateAssets', platform, arch)), 'run');
            }),
        },
        {
            title: `Running ${chalk_1.default.yellow('preStart')} hook`,
            task: childTrace({ name: 'run-preStart-hook', category: '@electron-forge/core' }, async (childTrace, { forgeConfig }, task) => {
                return (0, tracer_1.delayTraceTillSignal)(childTrace, task.newListr(await (0, hook_1.getHookListrTasks)(childTrace, forgeConfig, 'preStart')), 'run');
            }),
        },
    ], listrOptions);
    await runner.run();
    const { dir, forgeConfig, packageJSON } = runner.ctx;
    let lastSpawned = null;
    const forgeSpawn = async () => {
        let electronExecPath = null;
        // If a plugin has taken over the start command let's stop here
        let spawnedPluginChild = await forgeConfig.pluginInterface.overrideStartLogic({
            dir,
            appPath,
            interactive,
            enableLogging,
            args,
            runAsNode,
            inspect,
            inspectBrk,
        });
        if (typeof spawnedPluginChild === 'object' && 'tasks' in spawnedPluginChild) {
            const innerRunner = new listr2_1.Listr([], listrOptions);
            for (const task of spawnedPluginChild.tasks) {
                innerRunner.add(task);
            }
            await innerRunner.run();
            spawnedPluginChild = spawnedPluginChild.result;
        }
        let prefixArgs = [];
        if (typeof spawnedPluginChild === 'string') {
            electronExecPath = spawnedPluginChild;
        }
        else if (Array.isArray(spawnedPluginChild)) {
            [electronExecPath, ...prefixArgs] = spawnedPluginChild;
        }
        else if (spawnedPluginChild) {
            await (0, hook_1.runHook)(forgeConfig, 'postStart', spawnedPluginChild);
            return spawnedPluginChild;
        }
        if (!electronExecPath) {
            electronExecPath = await (0, electron_executable_1.default)(dir, packageJSON);
        }
        d('Electron binary path:', electronExecPath);
        const spawnOpts = {
            cwd: dir,
            stdio: 'inherit',
            env: {
                ...process.env,
                ...(enableLogging
                    ? {
                        ELECTRON_ENABLE_LOGGING: 'true',
                        ELECTRON_ENABLE_STACK_DUMPING: 'true',
                    }
                    : {}),
            },
        };
        if (runAsNode) {
            spawnOpts.env.ELECTRON_RUN_AS_NODE = 'true';
        }
        else {
            delete spawnOpts.env.ELECTRON_RUN_AS_NODE;
        }
        if (inspect) {
            args = ['--inspect'].concat(args);
        }
        if (inspectBrk) {
            args = ['--inspect-brk'].concat(args);
        }
        const spawned = (0, child_process_1.spawn)(electronExecPath, // eslint-disable-line @typescript-eslint/no-non-null-assertion
        prefixArgs.concat([appPath]).concat(args), spawnOpts);
        await (0, hook_1.runHook)(forgeConfig, 'postStart', spawned);
        return spawned;
    };
    const forgeSpawnWrapper = async () => {
        const spawned = await forgeSpawn();
        // When the child app is closed we should stop listening for stdin
        if (spawned) {
            if (interactive && process.stdin.isPaused()) {
                process.stdin.resume();
            }
            spawned.on('exit', () => {
                if (spawned.restarted) {
                    return;
                }
                if (interactive && !process.stdin.isPaused()) {
                    process.stdin.pause();
                }
            });
        }
        else if (interactive && !process.stdin.isPaused()) {
            process.stdin.pause();
        }
        lastSpawned = spawned;
        return lastSpawned;
    };
    if (interactive) {
        process.stdin.on('data', async (data) => {
            if (data.toString().trim() === 'rs' && lastSpawned) {
                console.info(chalk_1.default.cyan('\nRestarting App\n'));
                lastSpawned.restarted = true;
                lastSpawned.kill('SIGTERM');
                lastSpawned.emit('restarted', await forgeSpawnWrapper());
            }
        });
        process.stdin.resume();
    }
    const spawned = await forgeSpawnWrapper();
    if (interactive)
        console.log('');
    return spawned;
});
//# sourceMappingURL=data:application/json;base64,